searchState.loadedDescShard("openzeppelin_monitor", 0, "Blockchain monitoring and notification service.\nBootstrap module for initializing services and creating …\nDomain models and data structures for blockchain …\nRepository implementations for configuration management.\nCore services implementing the business logic.\nUtility modules for common functionality.\nContains the error value\nContains the success value\nType alias for handling ServiceResult\nCreates a block handler function that processes new blocks …\nCreates a trigger handler function that processes trigger …\nChecks if a network has any active monitors.\nInitializes all required services for the blockchain …\nProcesses a single block for all applicable monitors.\nContract address with optional ABI for decoding …\nMatch any transaction status\nSupported blockchain platform types\nBlock data from different blockchain platforms\nRepresents errors that can occur during configuration …\nCommon interface for loading configuration files\nSend notification to Discord\nDiscord notification configuration\nEthereum Virtual Machine based chains\nEVM block and transaction data\nEVM transaction\nMatched conditions from EVM chains\nBase Transaction struct Copied from web3 crate (now …\nWrapper around Base Block that implements additional …\nArguments matched from functions and events\nSingle decoded parameter from a function or event\nCollection of decoded parameters from matched conditions\nResult of a successful monitor match on an EVM chain\nBase Log struct Copied from web3 crate (now deprecated) …\nWrapper around Base Transaction that implements additional …\nWrapper around Base Receipt that implements additional …\nSend notification to email\nEmail notification configuration\nCondition for matching contract events\nMatch only failed transactions\nErrors related to file system errors\nCondition for matching contract function calls\nCollection of conditions that can trigger a monitor\nMidnight blockchain (not yet implemented)\nConfiguration for monitoring specific blockchain activity.\nMonitor match results from different blockchain platforms\nConfiguration for connecting to and interacting with a …\nNotification message fields\nOther errors that don’t fit into the categories above\nErrors related to parsing failures\nStructure to hold block processing results\nRPC endpoint configuration with load balancing weight\nExecute local script\nScript execution configuration\nThe possible languages of the script\nSend notification to Slack\nSlack notification configuration\nSolana blockchain (not yet implemented)\nStellar blockchain\nStellar ledger and transaction data\nStellar transaction\nMatched conditions from Stellar chains\nWrapper around LedgerInfo that implements additional …\nDecoded parameter from a Stellar contract function or event\nDecoded transaction data including envelope, result, and …\nRepresents a contract event emitted during transaction …\nInformation about a Stellar ledger (block)\nArguments matched from functions and events\nSingle decoded parameter from a function or event\nCollection of decoded parameters from matched conditions\nResult of a successful monitor match on a Stellar chain\nParsed result of a Stellar contract operation\nWrapper around TransactionInfo that provides additional …\nInformation about a Stellar transaction\nMatch only successful transactions\nSend notification to Telegram\nTelegram notification configuration\nCondition for matching transaction states\nPossible transaction execution states\nTransaction data from different blockchain platforms\nConfiguration for actions to take when monitored …\nConditions that should be met prior to triggering …\nSupported trigger action types\nType-specific configuration for triggers\nErrors related to validation failures\nMake HTTP request to webhook\nWebhook configuration\nOptional ABI for decoding contract interactions\nAccess list\nH160\nContract address in the network’s native format\nContract addresses to monitor, optionally with their ABIs\nOrder of this transaction within its ledger\nDecoded argument values\nDecoded argument values\nDecoded function arguments\nThe arguments of the script\nBlock Hash\nBlock hash. None when pending.\nBlock Number\nBlock number. None when pending.\nAverage block time in milliseconds\nMessage template\nChain ID for EVM networks\nConfiguration specific to the trigger type\nNumber of blocks needed for confirmation\nAddress of the contract that was called\nContract address that emitted the event\nCron expression for how often to check for new blocks\nData\nGet the decoded transaction data if available\nDecoded transaction data\nDecoded JSON representation of diagnostic events\nBase64-encoded XDR of diagnostic events\nDecoded transaction envelope containing the original …\nDecoded JSON representation of the envelope\nBase64-encoded XDR of the transaction envelope\nType of the event\nMatched event arguments\nMatched event arguments\nEvents to match\nOptional expression to filter function parameters\nOptional expression to filter event parameters\nOptional expression to filter transaction properties\nCatch-all for non-standard fields\nWhether this is a fee bump transaction\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSender\nName of the function that was called\nFull function signature\nMatched function arguments\nMatched function arguments\nFunction calls to match\nGet the gas limit for the transaction\nGas amount\nGet the gas price (None for EIP-1559 transactions)\nGas Price\nCalculates the recommended minimum number of past blocks …\nGet the transaction hash\nGet the transaction hash\nHash\nHash of the ledger\nRaw function/event signature as bytes\nUnique identifier for this event\nWhether the event was emitted during a successful contract …\nWhether this is an indexed parameter (for events)\nWhether this is an indexed parameter\nWhether this parameter is indexed (for event topics)\nInput data\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if a file is a JSON file based on extension\nCheck if a file is a JSON file based on extension\nParameter type (uint256, address, etc)\nParameter type\nParameter type (e.g., “address”, “i128”, “bytes…\nL2-specific transaction fields\nThe language of the script\nLedger sequence number containing this event\nLedger containing the matched transaction\nSequence number of the containing ledger\nTimestamp when the ledger was closed\nTimestamp when the ledger was closed\nTimestamp when the ledger was closed\nBase64-encoded XDR of the ledger header\nDecoded JSON representation of the ledger header\nBase64-encoded XDR of the ledger metadata\nDecoded JSON representation of the ledger metadata\nLoad all configuration files from a directory\nLoad all monitor configurations from a directory\nLoad all network configurations from a directory\nLoad all trigger configurations from a directory\nLoad configuration from a specific file path\nLoad a monitor configuration from a specific file\nLoad a network configuration from a specific file\nLoad a trigger configuration from a specific file\nLog Index in Block\nLog Type\nConditions that should trigger this monitor\nConditions that were matched\nConditions that were matched\nDecoded arguments from the matched conditions\nDecoded arguments from the matched conditions\nMax fee per gas\nMaximum number of past blocks to process\nminer bribe\nDecoded transaction metadata containing execution effects\nMonitor configuration that triggered the match\nMonitor configuration that triggered the match\nParameter name\nParameter name\nUnique name identifying this monitor\nHuman-readable name of the network\nUnique name identifying this trigger\nNetwork passphrase for Stellar networks\nNetwork slug that the transaction was sent from\nNetwork slug that the transaction was sent from\nType of blockchain (EVM, Stellar, etc)\nList of network slugs this monitor should watch\nGet the transaction nonce\nNonce\nGet the block number\nGet the block number (sequence)\nDeprecated: Use cursor at top level for pagination\nWhether this monitor is currently paused\nECDSA signature r, 32 bytes\nRaw transaction data\nTransaction receipt with execution results\nRemoved\nDecoded transaction result containing success/failure and …\nDecoded JSON representation of the result\nDecoded JSON representation of the metadata\nBase64-encoded XDR of the transaction metadata\nBase64-encoded XDR of the transaction result\nList of RPC endpoints with their weights for load balancing\nECDSA signature s, 32 bytes\nThe path to the script\nGet the transaction sender address\nSequence number of the ledger\nFunction or event signature\nFunction or event signature\nFunction signature (e.g., “transfer(address,uint256)”)\nEvent signature (e.g., “Transfer(address,address,uint256)…\nUnique identifier for this network\nCurrent status of the transaction\nRequired transaction status\nWhether to store processed blocks\nThe timeout of the script\nNotification title or subject\nGet the transaction recipient address (None for contract …\nRecipient (None when contract creation)\nDecoded JSON representation of the event topics\nBase64-encoded list of ScVals representing the event topics\nTopics\nTransaction that triggered the match\nTransaction that triggered the match\nTransaction Hash\nTransaction hash that generated this event\nHash of the transaction\nTransaction Index\nTransaction Index. None when pending.\nLog Index in Transaction\nTransaction type, Some(1) for AccessList transaction, None …\nTransaction states to match\nConditions that should be met prior to triggering …\nType of trigger (Email, Slack, Webhook, Telegram, Discord, …\nIDs of triggers to execute when conditions match\nType of RPC endpoint (e.g. “rpc”)\nURL of the RPC endpoint\nECDSA recovery id\nValidate the configuration\nValidate the monitor configuration\nValidate the network configuration\nValidate the trigger configuration\nGet the transaction value (amount of ETH transferred)\nParameter value\nTransferred value\nParameter value\nString representation of the parameter value\nDecoded JSON representation of the event value\nBase64-encoded ScVal representing the event value\nWeight for load balancing (0-100)\nCommand line arguments\nTelegram chat ID\nDisable web preview\nDiscord webhook URL\nOptional HTTP headers\nSMTP host\nLanguage of the script\nNotification message\nNotification message\nNotification message\nNotification message\nNotification message\nHTTP method to use\nSMTP password\nSMTP port (default 465)\nEmail recipients\nPath to script file\nSecret\nEmail sender\nSlack webhook URL\nTimeout in milliseconds\nTelegram bot token\nWebhook endpoint URL\nSMTP username\nErrors related to internal errors\nErrors related to load errors\nRepository for storing and retrieving monitor …\nInterface for monitor repository implementations\nService layer for monitor repository operations\nRepository for storing and retrieving network …\nInterface for network repository implementations\nService layer for network repository operations\nOther errors that don’t fit into the categories above\nRepresents errors that can occur during repository …\nRepository for storing and retrieving trigger …\nInterface for trigger repository implementations\nService layer for trigger repository operations\nErrors related to validation errors\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a specific monitor by ID\nGet a specific network by ID\nGet a specific trigger by ID\nGet a specific monitor by ID\nGet a specific network by ID\nGet a specific trigger by ID\nGet all monitors\nGet all networks\nGet all triggers\nGet all monitors\nGet all networks\nGet all triggers\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoad all monitor configurations from the given path\nLoad all network configurations from the given path\nLoad all trigger configurations from the given path\nLoad a monitor from a specific path\nLoad a monitor from a specific path\nLoad a monitor from a specific path\nMap of monitor names to their configurations\nMap of network slugs to their configurations\nCreate a new monitor repository from the given path\nCreate a new repository instance\nCreate a new trigger repository from the given path\nCreate a new monitor repository from the given path\nCreate a new monitor service with the default repository …\nCreate a new network repository from the given path\nCreate a new network service with the default repository …\nCreate a new trigger repository from the given path\nCreate a new trigger service with the default repository …\nCreate a new monitor repository from a list of monitors\nCreate a new monitor service with a specific configuration …\nCreate a new network service with a specific configuration …\nCreate a new trigger service with a specific configuration …\nCreate a new monitor service with a custom repository …\nCreate a new network service with a custom repository …\nCreate a new trigger service with a custom repository …\nMap of trigger names to their configurations\nReturns an error if any monitor references a non-existent …\nBlockchain client interfaces and implementations.\nBlock watcher service implementation.\nTransaction and event filtering functionality.\nNotification service implementation.\nTrigger service implementation.\nDefines the core interface for blockchain clients\nRepresents possible errors that can occur during …\nDefines the factory interface for creating block filters\nWhen a requested block cannot be found on the blockchain\nBase trait for all blockchain transport clients\nMain client pool manager that handles multiple blockchain …\nErrors related to client pool\nTrait for the client pool.\nErrors related to network connectivity issues\nA client for interacting with EVM-compatible blockchain …\nManages the rotation of blockchain RPC endpoints\nClient implementation for Ethereum Virtual Machine (EVM) …\nExtended functionality specific to EVM-compatible …\nBasic HTTP transport client for blockchain interactions\nInternal errors within the blockchain client\nOther errors that don’t fit into the categories above\nErrors related to malformed requests or invalid responses\nExtension trait for transports that support URL rotation\nClient implementation for the Stellar blockchain\nExtended functionality specific to the Stellar blockchain\nA client for interacting with Stellar-compatible …\nErrors related to transaction processing\nA default retry strategy that retries on requests based on …\nHTTP client for making requests, wrapped in Arc for …\nCustomizes the request for specific blockchain requirements\nCustomizes the request for specific blockchain requirements\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves a range of blocks from the blockchain\nRetrieves blocks within the specified range with retry …\nRetrieves blocks within the specified range with retry …\nGet the number of clients for a given client type.\nGet the current URL being used by the transport\nGets the current active RPC URL\nGets the current active RPC URL\nRetrieves the currently active RPC endpoint URL\nRetrieves events within a sequence range\nRetrieves events within a sequence range with pagination\nGets or creates an EVM client for the given network.\nRetrieves the latest block number from the blockchain\nRetrieves the latest block number with retry functionality\nRetrieves the latest block number with retry functionality\nRetrieves logs for a range of blocks\nRetrieves logs within the specified block range\nGets or creates a Stellar client for the given network.\nRetrieves a transaction receipt by its hash\nRetrieves a transaction receipt by hash with proper error …\nRetrieves transactions within a sequence range\nRetrieves transactions within a sequence range with …\nThe underlying HTTP transport client that handles actual …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new empty client pool.\nCreates a new EVM client instance\nCreates a new Stellar client instance\nCreates a new EVM transport client by initializing an HTTP …\nCreates a new Stellar transport client by initializing an …\nCreates a new rotating URL client\nCreates a new HTTP transport client with automatic …\nCreates a new EVM client instance with a specific …\nCreates a new Stellar client instance with a specific …\nRotates to the next available URL\nSend a raw request to the blockchain\nSends a raw JSON-RPC request to the EVM node\nSends a raw JSON-RPC request to the Stellar node\nSends a raw request to the blockchain RPC endpoint with …\nSends a JSON-RPC request to the blockchain node\nSets the retry policy for the transport\nSets a new retry policy for the transport\nSets a new retry policy for the transport\nUpdates the retry policy for the client\nUpdates the retry policy configuration\nMap of client storages indexed by client type\nAttempts to establish a connection with a new URL\nTests connection to a specific URL\nTests connection to a specific URL\nTests connectivity to a specific RPC endpoint\nUpdates the client with a new URL\nUpdates the client to use a new URL\nUpdates the client to use a new URL\nUpdates the client with a new client\nUpdates the active endpoint URL\nUpdate endpoint manager with a new client\nUpdate endpoint manager with a new client\nUpdate endpoint manager with a new client\nUpdate endpoint manager with a new client\nInterface for block storage implementations\nBlockTracker is responsible for monitoring the sequence of …\nInternal errors within the blockchain client\nTrait for the BlockTracker\nRepresents possible errors that can occur during block …\nService for managing multiple network watchers\nFile-based implementation of block storage\nTrait for job scheduler\nWatcher implementation for a single network\nErrors related to malformed requests or invalid responses\nOther errors that don’t fit into the categories above\nWhen a requested block cannot be found on the blockchain\nErrors related to network connectivity issues\nErrors related to transaction processing\nDefault implementation for FileBlockStorage\nDeletes all stored blocks for a network\nDeletes all block files for a network\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves the most recently processed block number for a …\nRetrieves the last processed block number for a network\nRetrieves the last processed block from a network-specific …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new network watcher instance\nCreates a new block watcher service\nCreates a new file-based block storage instance\nCreates a new BlockTracker instance.\nProcesses new blocks for a network\nRecords a processed block and identifies any gaps in block …\nSaves a collection of blocks for a network\nSaves blocks to a timestamped JSON file\nSaves the last processed block number for a network\nSaves the last processed block to a network-specific file\nSaves a missed block for a network\nSaves a missed block for a network\nStarts the network watcher\nStarts a watcher for a specific network\nStops the network watcher\nStops a watcher for a specific network\nTrait for filtering blockchain data\nErrors related to network connectivity issues\nFilter implementation for EVM-compatible blockchains\nRepresents errors that can occur during filter operations\nService for filtering blockchain data\nErrors related to internal processing errors\nErrors related to malformed requests or invalid responses\nOther errors that don’t fit into the categories above\nImplementation of the block filter for Stellar blockchain\nCompares two values that might be JSON or plain strings …\nConverts Stellar function arguments into match parameter …\nDecodes event logs using the provided ABI.\nDecodes Stellar events into a more processable format\nEvaluates a match expression against provided parameters.\nEvaluates a complex matching expression against provided …\nHelper functions for EVM-specific operations.\nProcesses a block and finds matches based on monitor …\nFilters a Stellar block against provided monitors\nFinds events in a transaction receipt that match the …\nFinds matching events for a transaction\nFinds function calls in a transaction that match the …\nFinds matching functions within a transaction\nFinds transactions that match the monitor’s conditions.\nFinds matching transactions based on monitor conditions\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nProcess a monitor match by executing associated triggers.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHelper functions for Stellar-specific operations.\nCompares two addresses for equality, ignoring case and “…\nCompares two function signatures for equality, ignoring …\nConverts an B256 hash to its hexadecimal string …\nFormats an ethabi Token into a consistent string …\nConverts an H160 address to its hexadecimal string …\nConverts an H256 hash to its hexadecimal string …\nNormalizes an address string by removing “0x” prefix, …\nNormalizes a function signature by removing spaces and …\nConverts a hexadecimal string to an H160 address.\nConverts a hexadecimal string to an H256 hash.\nCompares two Stellar addresses for equality, ignoring case …\nCompares two Stellar function signatures for equality, …\nCompare two JSON values with the given operator.\nCompare a JSON <code>Value</code> with a plain string using a specific …\nCompare two plain strings with the given operator.\nGets the function signature for a Stellar host function …\nGet the kind of a value from a JSON value.\nRecursively navigate through a JSON structure using dot …\nChecks if a string is a valid Stellar address.\nNormalizes a Stellar address by removing whitespace and …\nNormalizes a Stellar function signature by removing …\nSafely parse a string into a <code>serde_json::Value</code>. Returns …\nParses a Stellar Contract Value into a decoded parameter …\nParses XDR-encoded bytes into a decoded parameter entry.\nProcesses a Stellar host function operation into a parsed …\nErrors related to malformed requests or invalid responses\nImplementation of Discord notifications via webhooks\nConfiguration for email content\nImplementation of email notifications via SMTP\nErrors related to script execution\nErrors related to internal processing errors\nErrors related to network connectivity issues\nRepresents errors that can occur during notification …\nService for managing notifications across different …\nInterface for notification implementations\nOther errors that don’t fit into the categories above\nInterface for executing scripts\nA notification handler that executes scripts when triggered\nImplementation of Slack notifications via webhooks\nConfiguration for SMTP connection\nImplementation of Telegram notifications via webhooks\nImplementation of webhook notifications via webhooks\nExecutes a notification based on the trigger configuration\nFormats a message by substituting variables in the template\nFormats a message by substituting variables in the template\nFormats a message by substituting variables in the template\nFormats a message by substituting variables in the template\nFormats a message by substituting variables in the template\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a Discord notifier from a trigger configuration\nCreates an email notifier from a trigger configuration\nCreates a Script notifier from a trigger configuration\nCreates a Slack notifier from a trigger configuration\nCreates a Telegram notifier from a trigger configuration\nCreates a Webhook notifier from a trigger configuration\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new Discord notifier instance\nCreates a new email notifier instance\nCreates a new Slack notifier instance\nCreates a new Telegram notifier instance\nCreates a new Webhook notifier instance\nCreates a new notification service instance\nSends a notification with the given message\nSends a formatted message to Discord\nSends a formatted message to email\nSends a formatted message to Slack\nSends a formatted message to Telegram\nSends a formatted message to Webhook\nExecutes a script to send a custom notifications\nImplement the actual script notification logic\nCreates a new email notifier instance with a custom …\nErrors related to configuration errors\nErrors related to execution failures\nErrors related to execution failures\nErrors related to not found errors\nErrors related to not found errors\nOther errors that don’t fit into the categories above\nOther errors that don’t fit into the categories above\nErrors related to parsing errors\nRepresents possible errors during script operations\nA trait that defines the interface for executing custom …\nFactory for creating script executors based on the script …\nErrors related to system errors\nRepresents errors that can occur during trigger operations\nService for executing triggers with notifications\nTrait for executing triggers\nEnables downcasting by returning a reference to <code>Any</code>\nCreates a new script executor for the specified language …\nExecutes the script with the given MonitorMatch input.\nExecutes multiple triggers with variable substitution\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoads trigger condition scripts for monitors\nCreates a new trigger execution service\nProcesses the output from script execution.\nValidates script configuration parameters\nCalculates the time interval between two consecutive …\nSets up logging by reading configuration from environment …\nMetrics module for the application.\nMonitor utilities for executing and managing blockchain …\nSplits an expression into a tuple of (left, operator, …\nComputes the path of the rolled log file given the base …\nError handling utilities for the application.\nSets up logging by reading configuration from environment …\nChecks if the given log file exceeds the maximum allowed …\nA context wrapper for errors with additional metadata.\nA trait for errors that can provide a trace ID\nFormats the error message with its metadata appended in a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe error message\nAdditional metadata about the error\nExtract structured fields from metadata for tracing\nCreates a new error context with the given message, …\nCreates a new error context and logs it with the given …\nThe source error that caused this error\nThe timestamp of the error in RFC 3339 format\nReturns the trace ID for this error\nThe unique identifier for the error (UUID v4)\nAdds a single key-value metadata pair to the error context.\nGauge for available memory in bytes.\nGauge for total number of contracts being monitored …\nGauge for CPU usage percentage.\nGauge for used disk space in bytes.\nGauge for disk usage percentage.\nGauge for memory usage in bytes.\nGauge for memory usage percentage.\nGauge for number of active monitors (not paused).\nGauge for total number of monitors (active and paused).\nGauge for total number of networks being monitored.\nGauge Vector for per-network metrics.\nGlobal Prometheus registry.\nGauge for total memory in bytes.\nGauge for total number of triggers.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGather all metrics and encode into the provided format.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMetrics server module\nUpdates metrics related to monitors, triggers, networks, …\nUpdates the system metrics for CPU and memory usage.\nErrors related to execution failures\nRepresents possible errors during monitor execution\nErrors related to not found errors\nOther errors that don’t fit into the categories above\nExecution monitor module\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nContains the error value\nContains the success value\nExecutes a monitor against a specific block number on a …")