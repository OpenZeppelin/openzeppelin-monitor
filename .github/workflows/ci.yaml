name: CI

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

# run concurrency group for the workflow
concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true

jobs:
  ci:
    permissions:
      contents: none
    name: CI
    needs: [test, msrv, lockfile, rustfmt, clippy]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Failed
        run: exit 1
        if: contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled') || contains(needs.*.result, 'skipped')

  msrv:
    runs-on: ubuntu-latest
    steps:
      - name: Prepare
        id: init
        uses: ./.github/actions/prepare

      # Get the output of the prepare composite action
      - name: Get cache-hit output
        run: 'echo "Cache hit >>>>>: ${{ steps.init.outputs.cache-hit }}"'
      
      - name: Install cargo hack
        uses: taiki-e/install-action@cargo-hack

      # Check the minimum supported Rust version
      - name: Default features
        run: cargo hack check --feature-powerset --locked --rust-version --all-targets

  lockfile:
    runs-on: ubuntu-latest
    steps:
      - name: Prepare
        id: init
        uses: ./.github/actions/prepare
      
      # Get the output of the prepare composite action
      - name: Get cache-hit output
        run: 'echo "Cache hit >>>>>: ${{ steps.init.outputs.cache-hit }}"'

      # Check the lockfile
      - name: "Validate lockfile updates"
        run: cargo update --locked
  
  rustfmt:
    runs-on: ubuntu-latest
    steps:
      - name: Prepare
        id: init
        uses: ./.github/actions/prepare

      # Get the output of the prepare composite action
      - name: Get cache-hit output
        run: 'echo "Cache hit >>>>>: ${{ steps.init.outputs.cache-hit }}"'

      # Check the formatting of the code
      - name: "Check formatting"
        run: cargo fmt --all -- --check
  
  clippy:
    runs-on: ubuntu-latest
    steps:
      - name: Prepare
        id: init
        uses: ./.github/actions/prepare

      # Get the output of the prepare composite action
      - name: Get cache-hit output
        run: 'echo "Cache hit >>>>>: ${{ steps.init.outputs.cache-hit }}"'

      - name: Install SARIF tools
        run: cargo install clippy-sarif --locked

      - name: Install SARIF tools
        run: cargo install sarif-fmt --locked

      - name: Check
        run: >
          cargo clippy --all-features --all-targets --message-format=json
          | clippy-sarif
          | tee clippy-results.sarif
          | sarif-fmt
        continue-on-error: true

      - name: Upload
        uses: github/codeql-action/upload-sarif@dd196fa9ce80b6bacc74ca1c32bd5b0ba22efca7 #v3.28.3 
        with:
          sarif_file: clippy-results.sarif
          wait-for-processing: true

      - name: Report status
        run: cargo clippy --all-features --all-targets -- -D warnings --allow deprecated
  
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Prepare
        id: init
        uses: ./.github/actions/prepare

      # Get the output of the prepare composite action
      - name: Get cache-hit output
        run: 'echo "Cache hit >>>>>: ${{ steps.init.outputs.cache-hit }}"'

      - name: Install cargo hack
        uses: taiki-e/install-action@cargo-hack

      - name: Build
        run: cargo test --no-run
      
      - name: Test
        run: cargo hack test --feature-powerset --locked --all-targets

  docker-scan:
    runs-on: ubuntu-latest
    needs: ci

    steps:
      # Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@6524bf65af31da8d45b59e8c27de4bd072b392f5 # v3.8.0

      - name: Build local container
        uses: docker/build-push-action@67a2d409c0a876cbe6b11854e3e25193efe4e62d # v6.12.0
        with:
          tags: openzeppelin-monitor-dev:${{ github.sha }}
          push: false
          load: true
          file: Dockerfile.development
          platforms: linux/amd64

      - name: Scan image
        uses: anchore/scan-action@abae793926ec39a78ab18002bc7fc45bbbd94342 # v6.0.0
        with:
          image: openzeppelin-monitor-dev:${{ github.sha }}
          fail-build: true
          severity-cutoff: high
          output-format: table