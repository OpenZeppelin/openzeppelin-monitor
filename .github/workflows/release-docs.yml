---
name: Publish Docs

on:
  workflow_call:
    inputs:
      tag:
        type: string
        description: The tag to use for generating SBOM.
        required: true

jobs:
  docs:
    name: publish docs
    runs-on: ubuntu-latest
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      SLACK_CHANNEL: '#oss-releases'
    steps:
      - name: Get github app token
        uses: actions/create-github-app-token@af35edadc00be37caa72ed9f3e6d5f7801bfdf09  # v1.11.7
        id: gh-app-token
        with:
          app-id: ${{ vars.GH_APP_ID }}
          private-key: ${{ secrets.GH_APP_PRIVATE_KEY }}

      - name: Checkout tag
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
        with:
          ref: ${{ inputs.tag }}
          token: ${{ steps.gh-app-token.outputs.token }}

      - name: Slack notification
        uses: act10ns/slack@44541246747a30eb3102d87f7a4cc5471b0ffb7d  # v2.1.0
        with:
          status: starting
          steps: ${{ toJson(steps) }}
          channel: ${{ env.SLACK_CHANNEL }}
          message: Starting generating sbom for ${{ github.repository }} with tag
            ${{ inputs.tag }}......
        if: always()

      - name: Validate Tag
        id: validate_tag
        run: |-
          TAG="${{ inputs.tag }}"
          echo "Validating tag: $TAG"

          # Check if the tag matches the semantic versioning pattern
          if [[ ! $TAG =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            echo "Error: Tag '$TAG' is not a valid semantic version."
            exit 1
          fi

          MAJOR="${BASH_REMATCH[1]}"
          MINOR="${BASH_REMATCH[2]}"
          PATCH="${BASH_REMATCH[3]}"

          echo "Major: $MAJOR, Minor: $MINOR, Patch: $PATCH"
          RELEASE_BRANCH="release-v${MAJOR}.${MINOR}.0"
          DOCS_BRANCH="docs-v${MAJOR}.${MINOR}.0"

          if [ "$PATCH" -ne 0 ]; then
            # If it's a patch version, create a PR to merge release branch into docs branch
            echo "Creating PR to merge ${RELEASE_BRANCH} into ${DOCS_BRANCH}"
            echo "PR_TITLE=chore: Merge ${RELEASE_BRANCH} into ${DOCS_BRANCH}" >> $GITHUB_ENV
            echo "RELEASE_BRANCH=${RELEASE_BRANCH}" >> $GITHUB_ENV
            echo "DOCS_BRANCH=${DOCS_BRANCH}" >> $GITHUB_ENV
          else
            # If the patch version is zero, create a new docs branch
            echo "Creating new docs branch ${DOCS_BRANCH}"
            echo "DOCS_BRANCH=${DOCS_BRANCH}" >> $GITHUB_ENV
          fi
